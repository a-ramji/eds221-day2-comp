---
title: "EDS221 Day 2 Interactive Session"
format: html
editor: visual
execute: 
  warning: false
---

## EDS 221 Day 2 Interactive Session(s)

```{r}
library(tidyverse)
library(here)
library(janitor)
```

## Making & indexing data in R

### Vectors

Making Vectors

```{r}
dogs <- c("teddy", "khora", "waffle", "banjo", "tallie", "chessie")

# Check class of dogs (we'd usually just do this in the Console)

#typeof(dogs)
#class(dogs)
```

```{r}
my_breakfast <- c("waffles", 2, TRUE, "coffee")

#typeof(my_breakfast)
#class(my_breakfast)

# a vector can only have 1 type of data
```

```{r}
weights <- c(50, 60, 25, 35, 55, 35)

typeof(weights)
class(weights)
# actual values stored w 64-bit storage for each of the values -- default to doubles (values that can have decimals)
```

```{r}
weights_integer <- c(50L, 60L, 25L, 35L, 55L, 35L)

typeof(weights_integer)
class(weights_integer)
```

### Ask questions

in console --\> ?is , lots of ?is. functions

```{r}
is.numeric(weights_integer)
```

Change class of a variable

ex. want to have numbers (like zipcodes) treated as categorical value rather than numeric

```{r}
zipcodes <- c(93105, 93514, 93101, 93401)

typeof(zipcodes)
class(zipcodes)
```

use "as." family of functions

"recast variable *as* this thing"

```{r}
zipcodes_chr <- as.character(zipcodes)
 
# check outcomes --> now stored as strings
# zipcodes_chr
```

Takeaway:

-   Use as. family of functions to recast data classes

-   Use is. family of functions to ASK what class something is

    -   sidenote: use ctrl + shift + C to comment out larger selections of code

### Create a vector with named elements

```{r}
dog_food <- c(teddy = "purina", khora = "alpo", waffle = "fancy feast", banjo = "blue diamond", tallie = "farmer's dog", chessie = "stella's stew")

# typeof(dog_food)
# class(dog_food)

#dog_food
```

```{r}
test <- c(cat = 4, dog = 10, elephant = 11)
class(test)
```

example: accessing the 2nd element in a vector

```{r}
dog_food[2]
# R uses a 1-index, meaning that the first element of a vector is 1
# Python and JavaScript use 0-indexing (starts at 0)
```

usually you don't have names for each different element that's in a vector

if you do, you can access individual named values:

```{r}
dog_food["khora"]
```

Access ranges of values in a vector

Use : to refer to a range (low : high)

```{r}
trees <- c("ponderosa", "lodgepole", "jeffrey", "sugar", "white", "bristlecone")
# class(trees)

trees[3]

trees[3:5]
```

### Warm-up for **for loops**

-   use the index of things to help us iterate through different vectors

using trees ...

```{r}
i <- 3
trees[i]
```

i in our current session has a value of 3.

if we recreate this in the chunk below, that single variable will be redefined (overwritten) with the most recent version or definition (we can check in environment tab)

```{r}
i <- seq(1:3) # same thing as seq(from = 1, to = 3)
# nothing special about using i for our index here
yoda <- 4
trees[i]
trees[yoda]
```

```{r}
y = 6i
class(y)
# this is the other way that i shows up by default in R , kind of like how L sets numbers as integers but you could also have a variable called L
```

-   note: when we redefine i in a later chunk, when rendering, this doesn't overwrite what happens in the first chunk -- like running everything from the top down, not as a whole.

These are also mutable -- you can change what is stored in a vector!

```{r}
trees[3] <- "OAK"

trees
```

## Matrix indexing

```{r}
fish_size <- matrix(c(0.8, 1.2, 0.4, 0.9), ncol = 2, nrow = 2, byrow = FALSE)

fish_size

class(fish_size)

str(fish_size)
# [1:2, 1:2] (2x2)
typeof(fish_size)

fish_size[2, 2]

# everything in second column
fish_size[ , 2]
```

## An Edit!
